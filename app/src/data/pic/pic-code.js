var code = [];
code.push({
  asm: [
    ";*************************************************************************************",
    ";  Lab Assignment: TT Board 1",
    ";  Program File Name: TT Circuit 1.asm",
    ";",
    ";   Software:",
    ";   This program takes a key that is pressed on the keypad and",
    ";   converts it to a 4 bit binary number RRCC Where RR is Row and CC is column",
    ";",
    ";*************************************************************************************",
    "",
    ";======================= Configuration Register Programming =====================",
    ";This loading of the CONFIG register with the WDT turned off and the security",
    ";inactive.",
    "",
    " __CONFIG 0x3FFA   ;0x3FFA hex = b'11 1111 1111 1010'",
    "",
    ";  Bits 13 - 4 Code Protect Bits, Bit 3 Power Up Timer, Bit 2 Watch Dog Timer,",
    ";  Bits 1 and 0 are Oscillator Select Bits",
    ";",
    ";=========================================================================",
    ";============================= Equates=====================================",
    "",
    "Keypr      equ 0x0c    ;First DRAM location used as short term storage",
    "Col        equ 0x0d    ;Second DRAM location used as short term storage",
    "Row        equ 0x0e    ;Third DRAM location used for short term storage",
    ";=========================================================================",
    ";  Information the assembler needs to create proper files and program output",
    "",
    "",
    "   title\"TT Circuit 1\"   ;Title of lab printed on History File",
    "   list p=16f84A       ;Directive telling Assembler which PIC to use",
    "   #include <ETR261.h> ;Header file to make programming simpler",
    "",
    ";=========================================================================",
    "",
    "           org 00h     ;starting address for the program in PRAM",
    "           goto Start  ;skip over the interrupt address",
    "           org 04h     ;starting address for the start of code",
    "           retfie      ;return from interrupt to take care of an false interrupt",
    "",
    ";=========================================================================",
    "",
    "Start      movlw   0xf0        ;setup PORTA",
    "           tris    PORTA",
    "",
    "           movlw   0x87        ;setup PORTB",
    "           tris    PORTB",
    "           movlw   0x0F",
    "           movwf   PORTA",
    "again      movlw   0xf0        ;scan row 1",
    "           movwf   Row",
    "           movwf   PORTB",
    "           call    KEY",
    "",
    "           movlw   0xe8        ;scan row 2",
    "           movwf   Row",
    "           movwf   PORTB",
    "           call    KEY",
    "",
    "           movlw   0xd8        ;scan row 3",
    "           movwf   Row",
    "           movwf   PORTB",
    "           call    KEY",
    "",
    "           movlw   0xb8        ;scan row 4",
    "           movwf   Row",
    "           movwf   PORTB",
    "           call    KEY",
    "           goto    again",
    "",
    "KEY",
    "           movlw   0x06",
    "           movwf   Col",
    "           btfss   PORTB,0     ;scan column 3",
    "           call    KEYPRESS",
    "",
    "           movlw   0x05",
    "           movwf   Col",
    "           btfss   PORTB,1     ;scan column 2",
    "           call    KEYPRESS",
    "",
    "           movlw   0x03",
    "           movwf   Col",
    "           btfss   PORTB,2     ;scan column 1",
    "           call    KEYPRESS",
    "           return",
    "",
    "KEYPRESS   movf    Row,w",
    "           andlw   0xf8",
    "           iorwf   Col,w",
    "           movwf   Keypr",
    "           movf    Keypr,w",
    "           sublw   0xf3",
    "           btfss   STATUS,Z",
    "           goto    two",
    "           movlw   0x00",
    "           movwf   PORTA",
    "           return",
    "two        movf    Keypr,w",
    "           sublw   0xf5",
    "           btfss   STATUS,Z",
    "           goto    three",
    "           movlw   0x01",
    "           movwf   PORTA",
    "           return",
    "three      movf    Keypr,w",
    "           sublw   0xf6",
    "           btfss   STATUS,Z",
    "           goto    four",
    "           movlw   0x02",
    "           movwf   PORTA",
    "           return",
    "four       movf    Keypr,w",
    "           sublw   0xeb",
    "           btfss   STATUS,Z",
    "           goto    five",
    "           movlw   0x04",
    "           movwf   PORTA",
    "           return",
    "five       movf    Keypr,w",
    "           sublw   0xed",
    "           btfss   STATUS,Z",
    "           goto    six",
    "           movlw   0x05",
    "           movwf   PORTA",
    "           return",
    "six        movf    Keypr,w",
    "           sublw   0xee",
    "           btfss   STATUS,Z",
    "           goto    seven",
    "           movlw   0x06",
    "           movwf   PORTA",
    "           return",
    "seven      movf    Keypr,w",
    "           sublw   0xdb",
    "           btfss   STATUS,Z",
    "           goto    eight",
    "           movlw   0x08",
    "           movwf   PORTA",
    "           return",
    "eight      movf    Keypr,w",
    "           sublw   0xdd",
    "           btfss   STATUS,Z",
    "           goto    nine",
    "           movlw   0x09",
    "           movwf   PORTA",
    "           return",
    "nine       movf    Keypr,w",
    "           sublw   0xde",
    "           btfss   STATUS,Z",
    "           goto    Asterisk",
    "           movlw   0x0A",
    "           movwf   PORTA",
    "           return",
    "Asterisk   movf    Keypr,w",
    "           sublw   0xbe",
    "           btfss   STATUS,Z",
    "           goto    zero",
    "           movlw   0x0C",
    "           movwf   PORTA",
    "           return",
    "zero       movf    Keypr,w",
    "           sublw   0xbd",
    "           btfss   STATUS,Z",
    "           goto    Pound",
    "           movlw   0x0D",
    "           movwf   PORTA",
    "           return",
    "Pound      movf    Keypr,w",
    "           sublw   0xbb",
    "           btfss   STATUS,Z",
    "           return",
    "           movlw   0x0E",
    "           movwf   PORTA",
    "           return",
    "",
    "           end"
    ].join('\n'),
  js: function (pic) {
    var checkRow;

    checkRow = function (number) {
      return function () {
        var row = number << 2,
            input;

        pic.setPortB([0xf0, 0xe8, 0xd8, 0xb8][number]);
        input = pic.getPortB();

        if (input === 0x06) {
          pic.setPortA(row + 0x0);
        }
        if (input === 0x05) {
          pic.setPortA(row + 0x1);
        }
        if (input === 0x03) {
          pic.setPortA(row + 0x2);
        }
      };
    };

    return {
      start: function () {
        pic.trisPortA(0xf0);
        pic.trisPortB(0x87);
        pic.setPortA(0x0f);
      },
      loop: [checkRow(0), checkRow(1), checkRow(2), checkRow(3)]
    };
  }
});

code.push({
  asm: [
    ";*************************************************************************************",
    ";  Lab Assignment: TT Board 2 ",
    ";  Program File Name: TT Circuit 2.asm",
    ";",
    ";   Software:  ",
    ";   This program takes row and column information from circuit 1 and converts that  ",
    ";   it to a BCD number representing the key pressed in circuit 1.",
    ";",
    ";*************************************************************************************",
    "",
    ";======================= Configuration Register Programming =====================",
    ";This loading of the CONFIG register with the WDT turned off and the security",
    ";inactive.",
    "",
    " __CONFIG 0x3FFA   ;0x3FFA hex = b'11 1111 1111 1010'",
    "",
    ";  Bits 13 - 4 Code Protect Bits, Bit 3 Power Up Timer, Bit 2 Watch Dog Timer,",
    ";  Bits 1 and 0 are Oscillator Select Bits",
    ";",
    ";=========================================================================",
    ";============================= Equates=====================================",
    "",
    "Keypr      equ 0x0c    ;First DRAM location used as short term storage",
    "",
    ";=========================================================================",
    ";  Information the assembler needs to create proper files and program output",
    "",
    "",
    "   title\"TT Circuit 2\"       ;Title of lab printed on History File",
    "   list p=16f84A           ;Directive telling Assembler which PIC to use",
    "   #include <ETR261.h>     ;Header file to make programming simpler",
    "",
    ";=========================================================================",
    "",
    "           org 00h     ;starting address for the program in PRAM",
    "           goto Start  ;skip over the interrupt address",
    "           org 04h     ;starting address for the start of code",
    "           retfie      ;return from interrupt to take care of an false interrupt",
    "",
    ";=========================================================================",
    "",
    "Start      movlw   0xf0        ;setup PORTA bit0 -bit 4 outputs ",
    "           tris    PORTA",
    "           ",
    "           movlw   0xff        ;setup PORTB all inputs",
    "           tris    PORTB",
    "           movlw   0x0F",
    "           movwf   PORTA",
    "",
    "again      movf    PORTB,W",
    "           movwf   Keypr",
    "           call    KEYPRESS",
    "           goto    again",
    "",
    "KEYPRESS   ",
    "           movf    Keypr,w",
    "           sublw   0x00",
    "           btfss   STATUS,Z",
    "           goto    two",
    "           movlw   0x01",
    "           movwf   PORTA",
    "           return",
    "two        movf    Keypr,w",
    "           sublw   0x01",
    "           btfss   STATUS,Z",
    "           goto    three",
    "           movlw   0x02",
    "           movwf   PORTA",
    "           return",
    "three      movf    Keypr,w",
    "           sublw   0x02",
    "           btfss   STATUS,Z",
    "           goto    four",
    "           movlw   0x03",
    "           movwf   PORTA",
    "           return",
    "four       movf    Keypr,w",
    "           sublw   0x04",
    "           btfss   STATUS,Z",
    "           goto    five",
    "           movlw   0x04",
    "           movwf   PORTA",
    "           return",
    "five       movf    Keypr,w",
    "           sublw   0x05",
    "           btfss   STATUS,Z",
    "           goto    six",
    "           movlw   0x05",
    "           movwf   PORTA",
    "           return",
    "six        movf    Keypr,w",
    "           sublw   0x06",
    "           btfss   STATUS,Z",
    "           goto    seven",
    "           movlw   0x06",
    "           movwf   PORTA",
    "           return",
    "seven      movf    Keypr,w",
    "           sublw   0x08",
    "           btfss   STATUS,Z",
    "           goto    eight",
    "           movlw   0x07",
    "           movwf   PORTA",
    "           return",
    "eight      movf    Keypr,w",
    "           sublw   0x09",
    "           btfss   STATUS,Z",
    "           goto    nine",
    "           movlw   0x08",
    "           movwf   PORTA",
    "           return",
    "nine       movf    Keypr,w",
    "           sublw   0x0A",
    "           btfss   STATUS,Z",
    "           goto    Asterisk",
    "           movlw   0x09",
    "           movwf   PORTA",
    "           return",
    "Asterisk   movf    Keypr,w",
    "           sublw   0x0C",
    "           btfss   STATUS,Z",
    "           goto    zero",
    "           movlw   0x0A",
    "           movwf   PORTA",
    "           return",
    "zero       movf    Keypr,w",
    "           sublw   0x0E",
    "           btfss   STATUS,Z",
    "           goto    Blank",
    "           movlw   0x0D",
    "           movwf   PORTA",
    "           return",
    "Blank      movf    Keypr,w",
    "           sublw   0x0E",
    "           btfss   STATUS,Z",
    "           goto    Pound",
    "           movlw   0x00",
    "           movwf   PORTA",
    "           return",
    "Pound      movf    Keypr,w",
    "           sublw   0x0C",
    "           btfss   STATUS,Z",
    "           return",
    "           movlw   0x0F",
    "           movwf   PORTA",
    "           return",
    "",
    "",
    "           end"
    ].join('\n'),
  js: function (pic) {
    var inputMap, mapRowColToBCD;

    inputMap = {
      0: 1,
      1: 2,
      2: 3,
      3: 0x0f,
      4: 4,
      5: 5,
      6: 6,
      7: 0x0f,
      8: 7,
      9: 8,
      10: 9,
      11: 0x0f,
      12: 0xa,
      13: 0,
      14: 0x0f,
      15: 0x0f
    };

    mapRowColToBCD = function () {
      pic.setPortA(inputMap[pic.getPortB()]);
    };

    return {
      start: function () {
        pic.trisPortA(0xf0);
        pic.trisPortB(0xff);
        pic.setPortA(0x0f);
      },
      loop: [mapRowColToBCD]
    };
  }
});

code.push({
  asm: [
      ";*************************************************************************************",
      ";    Lab Assignment: TT Board 3 ",
      ";    Program File Name: TT Circuit 3",
      ";",
      ";   Software:    ",
      ";   This program converts BCD to 7 segment information for a CA display",
      ";   ",
      ";",
      ";*************************************************************************************",
      "",
      ";======================= Configuration Register Programming =====================",
      ";This loading of the CONFIG register with the WDT turned off and the security",
      ";inactive.",
      "",
      " __CONFIG 0x3FFA ;0x3FFA hex = b'11 1111 1111 1010'",
      "",
      ";  Bits 13 - 4 Code Protect Bits, Bit 3 Power Up Timer, Bit 2 Watch Dog Timer,",
      ";  Bits 1 and 0 are Oscillator Select Bits",
      ";",
      ";=========================================================================",
      ";============================= Equates=====================================",
      "",
      "",
      ";=========================================================================",
      ";  Information the assembler needs to create proper files and program output",
      "",
      "",
      " title\"TT Circuit 3\"       ;Title of lab printed on History File",
      " list p=16f84A           ;Directive telling Assembler which PIC to use",
      " #include <ETR261.h>     ;Header file to make programming simpler",
      "",
      ";=========================================================================",
      "",
      "         org 00h     ;starting address for the program in PRAM",
      "         goto Start  ;skip over the interrupt address",
      "         org 04h     ;starting address for the start of code",
      "         retfie      ;return from interrupt to take care of an false interrupt",
      "",
      ";=========================================================================",
      "",
      "Start                                ",
      "",
      ";============================= Configure Port B ==============================",
      "Start        movlw   0x80        ;all bits as outputs but bit7",
      "     tris    PORTB",
      "     ",
      "     movlw   0xff        ;setup PORTA all inputs",
      "     tris    PORTA",
      ";=========================================================================",
      "",
      "Main     movf    PORTA,W",
      "     call    table",
      "     movwf   PORTB",
      "     goto    Main",
      "                             ",
      "",
      "",
      "table        addwf   PCL",
      "     retlw   0xc0    ;0",
      "     retlw   0xf9    ;1",
      "     retlw   0xa4    ;2",
      "     retlw   0xb0    ;3",
      "     retlw   0x99    ;4",
      "     retlw   0x92    ;5",
      "     retlw   0x83    ;6",
      "     retlw   0xf8    ;7",
      "     retlw   0x80    ;8",
      "     retlw   0x98    ;9",
      "     retlw   0xbf    ;blank",
      "     retlw   0xff    ;blank",
      "     retlw   0xff    ;blank",
      "     retlw   0xff    ;blank",
      "     retlw   0xff    ;blank",
      "     retlw   0xff    ;blank",
      "     ",
      "     end",
      ""
    ].join('\n'),
  js: function (pic) {
    var inputMap, mapBCDTo7SegmentDisplay;

    inputMap = {
      0: 0xc0,
      1: 0xf9,
      2: 0xa4,
      3: 0xb0,
      4: 0x99,
      5: 0x92,
      6: 0x83,
      7: 0xf8,
      8: 0x80,
      9: 0x98,
      10: 0xbf,
      11: 0xff,
      12: 0xff,
      13: 0xff,
      14: 0xff,
      15: 0xff
    };

    mapBCDTo7SegmentDisplay = function () {
      pic.setPortB(inputMap[pic.getPortA()]);
    };

    return {
      start: function () {
        pic.trisPortA(0xff);
        pic.trisPortB(0x80);
      },
      loop: [mapBCDTo7SegmentDisplay]
    };
  }
});

module.exports = code;
